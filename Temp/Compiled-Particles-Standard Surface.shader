// Compiled shader for PC, Mac & Linux Standalone

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Particles/Standard Surface" {
Properties {
 _MainTex ("Albedo", 2D) = "white" { }
 _Color ("Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _Cutoff ("Alpha Cutoff", Range(0.000000,1.000000)) = 0.500000
 _MetallicGlossMap ("Metallic", 2D) = "white" { }
[Gamma]  _Metallic ("Metallic", Range(0.000000,1.000000)) = 0.000000
 _Glossiness ("Smoothness", Range(0.000000,1.000000)) = 0.500000
 _BumpScale ("Scale", Float) = 1.000000
 _BumpMap ("Normal Map", 2D) = "bump" { }
 _EmissionColor ("Color", Color) = (0.000000,0.000000,0.000000,1.000000)
 _EmissionMap ("Emission", 2D) = "white" { }
 _DistortionStrength ("Strength", Float) = 1.000000
 _DistortionBlend ("Blend", Range(0.000000,1.000000)) = 0.500000
 _SoftParticlesNearFadeDistance ("Soft Particles Near Fade", Float) = 0.000000
 _SoftParticlesFarFadeDistance ("Soft Particles Far Fade", Float) = 1.000000
 _CameraNearFadeDistance ("Camera Near Fade", Float) = 1.000000
 _CameraFarFadeDistance ("Camera Far Fade", Float) = 2.000000
[HideInInspector]  _Mode ("__mode", Float) = 0.000000
[HideInInspector]  _FlipbookMode ("__flipbookmode", Float) = 0.000000
[HideInInspector]  _LightingEnabled ("__lightingenabled", Float) = 1.000000
[HideInInspector]  _DistortionEnabled ("__distortionenabled", Float) = 0.000000
[HideInInspector]  _EmissionEnabled ("__emissionenabled", Float) = 0.000000
[HideInInspector]  _BlendOp ("__blendop", Float) = 0.000000
[HideInInspector]  _SrcBlend ("__src", Float) = 1.000000
[HideInInspector]  _DstBlend ("__dst", Float) = 0.000000
[HideInInspector]  _ZWrite ("__zw", Float) = 1.000000
[HideInInspector]  _Cull ("__cull", Float) = 2.000000
[HideInInspector]  _SoftParticlesEnabled ("__softparticlesenabled", Float) = 0.000000
[HideInInspector]  _CameraFadingEnabled ("__camerafadingenabled", Float) = 0.000000
[HideInInspector]  _SoftParticleFadeParams ("__softparticlefadeparams", Vector) = (0.000000,0.000000,0.000000,0.000000)
[HideInInspector]  _CameraFadeParams ("__camerafadeparams", Vector) = (0.000000,0.000000,0.000000,0.000000)
[HideInInspector]  _DistortionStrengthScaled ("__distortionstrengthscaled", Float) = 0.000000
}
SubShader { 
 Tags { "IGNOREPROJECTOR"="true" "RenderType"="Opaque" "PerformanceChecks"="False" "PreviewType"="Plane" }
 GrabPass {
  "_GrabTexture"
  Tags { "LIGHTMODE"="ALWAYS" }
 }
 Pass {
  Name "ShadowCaster"
  Tags { "LIGHTMODE"="SHADOWCASTER" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" "PreviewType"="Plane" }
  Cull Off
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat6);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_WorldToObject at 96
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat1.x, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_DEPTH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (96 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat14;
    float u_xlat21;
    bool u_xlatb21;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 2]));
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat0.xyz));
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = fma(u_xlat3.yzx, u_xlat2.zxy, (-u_xlat5.xyz));
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = fma(u_xlat1.yzx, u_xlat3.zxy, (-u_xlat6.xyz));
    u_xlat6.xyz = float3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = float3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, input.POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, input.POSITION0);
    u_xlat1.y = dot(u_xlat3, input.POSITION0);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = fma((-u_xlat21), u_xlat21, 1.0);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat21), u_xlat1.xyz);
    u_xlatb21 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], input.POSITION0.wwww, u_xlat0);
    u_xlat1.x = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat14 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat14);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat14) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat14);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SHADOWS_CUBE 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"

Constant Buffer "VGlobals" (96 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 32
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float3 u_xlat5;
    float3 u_xlat6;
    float3 u_xlat7;
    float u_xlat21;
    bool u_xlatb21;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x18 >> 2) + 0]));
    u_xlat2.z = u_xlat1.y;
    u_xlat3.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x0 >> 2) + 2]));
    u_xlat2.x = u_xlat3.z;
    u_xlat7.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0xc >> 2) + 2]));
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati0].value[(0x24 >> 2) + 2]));
    u_xlat2.y = u_xlat7.z;
    u_xlat3.z = u_xlat1.x;
    u_xlat1.x = u_xlat3.y;
    u_xlat1.y = u_xlat7.x;
    u_xlat3.y = u_xlat7.y;
    u_xlat0.xyz = u_xlat2.zxy * u_xlat1.yzx;
    u_xlat0.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat0.xyz));
    u_xlat5.xyz = u_xlat2.yzx * u_xlat3.zxy;
    u_xlat5.xyz = fma(u_xlat3.yzx, u_xlat2.zxy, (-u_xlat5.xyz));
    u_xlat21 = dot(u_xlat1.xyz, u_xlat5.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat6.xyz = u_xlat1.zxy * u_xlat3.yzx;
    u_xlat6.xyz = fma(u_xlat1.yzx, u_xlat3.zxy, (-u_xlat6.xyz));
    u_xlat6.xyz = float3(u_xlat21) * u_xlat6.xyz;
    u_xlat5.xyz = float3(u_xlat21) * u_xlat5.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat5.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat6.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat1.w = u_xlat4.x;
    u_xlat1.x = dot(u_xlat1, input.POSITION0);
    u_xlat3.w = u_xlat4.y;
    u_xlat2.w = u_xlat4.z;
    u_xlat1.z = dot(u_xlat2, input.POSITION0);
    u_xlat1.y = dot(u_xlat3, input.POSITION0);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat21 = fma((-u_xlat21), u_xlat21, 1.0);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat21), u_xlat1.xyz);
    u_xlatb21 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], input.POSITION0.wwww, u_xlat0);
    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat1.x, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDBASE" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" "PreviewType"="Plane" }
  ZWrite [_ZWrite]
  Cull [_Cull]
  Blend [_SrcBlend] [_DstBlend]
 BlendOp [_BlendOp]
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 192
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 _MainTex_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat6));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat6), u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 1 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 2 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 1

Constant Buffer "FGlobals" (376 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Float _Metallic at 368
  Float _Glossiness at 372
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlatb40 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb40){
        u_xlatb41 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat42 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat42);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat41) * FGlobals._LightColor0.xyz;
    if(u_xlatb40){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 192
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 _MainTex_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat6));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat6), u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SHADOWS_SCREEN 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 208
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat1.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat1.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD0.xyz = u_xlat1.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = fma(u_xlat1.x, u_xlat1.x, (-u_xlat10));
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat1.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat1.z = dot(VGlobals.unity_SHBb, u_xlat2);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat10), u_xlat1.xyz);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat0.zw;
    output.TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 208
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat1.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat1.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD0.xyz = u_xlat1.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = fma(u_xlat1.x, u_xlat1.x, (-u_xlat10));
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat1.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat1.z = dot(VGlobals.unity_SHBb, u_xlat2);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat10), u_xlat1.xyz);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat0.zw;
    output.TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (392 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Vector3 _EmissionColor at 368
  Float _Metallic at 384
  Float _Glossiness at 388
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb43 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb43){
        u_xlatb44 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb44)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat44 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat44, u_xlat45);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat44 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat44 = clamp(u_xlat44, 0.0f, 1.0f);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat44) * FGlobals._LightColor0.xyz;
    if(u_xlatb43){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD3.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 1 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 2 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 1

Constant Buffer "FGlobals" (376 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Float _Metallic at 368
  Float _Glossiness at 372
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlatb40 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb40){
        u_xlatb41 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat42 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat42);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat41) * FGlobals._LightColor0.xyz;
    if(u_xlatb40){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SHADOWS_SCREEN _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 4
Set 2D Texture "_ShadowMapTexture" to slot 2
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 4 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 1

Constant Buffer "FGlobals" (488 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Vector3 _EmissionColor at 464
  Float _Metallic at 480
  Float _Glossiness at 484
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    bool u_xlatb45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = (-u_xlat43) + u_xlat44;
    u_xlat43 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat44, u_xlat43);
    u_xlat43 = fma(u_xlat43, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
    u_xlatb44 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb44){
        u_xlatb45 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb45)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat45 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat46 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat46);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat45 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat46 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat45 = u_xlat45 + (-u_xlat46);
    u_xlat43 = fma(u_xlat43, u_xlat45, u_xlat46);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat43) * FGlobals._LightColor0.xyz;
    if(u_xlatb44){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD3.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SHADOWS_SCREEN 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (472 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Float _Metallic at 464
  Float _Glossiness at 468
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    bool u_xlatb42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat41, u_xlat40);
    u_xlat40 = fma(u_xlat40, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat40 = clamp(u_xlat40, 0.0f, 1.0f);
    u_xlatb41 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb41){
        u_xlatb42 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb42)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat42 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat17 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat42, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat42 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat42 = clamp(u_xlat42, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat42 = u_xlat42 + (-u_xlat4.x);
    u_xlat40 = fma(u_xlat40, u_xlat42, u_xlat4.x);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat40) * FGlobals._LightColor0.xyz;
    if(u_xlatb41){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 4
Set 2D Texture "_ShadowMapTexture" to slot 2
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 4 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 1

Constant Buffer "FGlobals" (488 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Vector3 _EmissionColor at 464
  Float _Metallic at 480
  Float _Glossiness at 484
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    bool u_xlatb45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = (-u_xlat43) + u_xlat44;
    u_xlat43 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat44, u_xlat43);
    u_xlat43 = fma(u_xlat43, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
    u_xlatb44 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb44){
        u_xlatb45 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb45)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat45 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat46 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat46);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat45 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat46 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat45 = u_xlat45 + (-u_xlat46);
    u_xlat43 = fma(u_xlat43, u_xlat45, u_xlat46);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat43) * FGlobals._LightColor0.xyz;
    if(u_xlatb44){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD3.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (472 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Float _Metallic at 464
  Float _Glossiness at 468
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    bool u_xlatb42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat41, u_xlat40);
    u_xlat40 = fma(u_xlat40, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat40 = clamp(u_xlat40, 0.0f, 1.0f);
    u_xlatb41 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb41){
        u_xlatb42 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb42)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat42 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat17 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat42, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat42 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat42 = clamp(u_xlat42, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat42 = u_xlat42 + (-u_xlat4.x);
    u_xlat40 = fma(u_xlat40, u_xlat42, u_xlat4.x);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat40) * FGlobals._LightColor0.xyz;
    if(u_xlatb41){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (392 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Vector3 _EmissionColor at 368
  Float _Metallic at 384
  Float _Glossiness at 388
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb43 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb43){
        u_xlatb44 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb44)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat44 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat44, u_xlat45);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat44 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat44 = clamp(u_xlat44, 0.0f, 1.0f);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat44) * FGlobals._LightColor0.xyz;
    if(u_xlatb43){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD3.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (464 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 256
  Matrix4x4 unity_WorldToObject at 320
  Matrix4x4 unity_MatrixVP at 384
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHBr at 192
  Vector4 unity_SHBg at 208
  Vector4 unity_SHBb at 224
  Vector4 unity_SHC at 240
  Vector4 _MainTex_ST at 448
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float u_xlat15;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat1.xyz = float3(u_xlat15) * u_xlat1.xyz;
    output.TEXCOORD0.xyz = u_xlat1.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat2 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = fma(u_xlat2, u_xlat2, u_xlat3);
    u_xlat2 = fma(u_xlat2, u_xlat1.xxxx, u_xlat4);
    u_xlat2 = fma(u_xlat0, u_xlat1.zzzz, u_xlat2);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat3);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat15 = u_xlat1.y * u_xlat1.y;
    u_xlat15 = fma(u_xlat1.x, u_xlat1.x, (-u_xlat15));
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat1);
    u_xlat1.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat15), u_xlat3.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, u_xlat1.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (464 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 256
  Matrix4x4 unity_WorldToObject at 320
  Matrix4x4 unity_MatrixVP at 384
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHBr at 192
  Vector4 unity_SHBg at 208
  Vector4 unity_SHBb at 224
  Vector4 unity_SHC at 240
  Vector4 _MainTex_ST at 448
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float u_xlat15;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat1.xyz = float3(u_xlat15) * u_xlat1.xyz;
    output.TEXCOORD0.xyz = u_xlat1.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat2 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = fma(u_xlat2, u_xlat2, u_xlat3);
    u_xlat2 = fma(u_xlat2, u_xlat1.xxxx, u_xlat4);
    u_xlat2 = fma(u_xlat0, u_xlat1.zzzz, u_xlat2);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat3);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat15 = u_xlat1.y * u_xlat1.y;
    u_xlat15 = fma(u_xlat1.x, u_xlat1.x, (-u_xlat15));
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat1);
    u_xlat1.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat15), u_xlat3.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, u_xlat1.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SHADOWS_SCREEN VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_WorldToObject at 336
  Matrix4x4 unity_MatrixVP at 400
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 _MainTex_ST at 464
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat1;
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat2.xyz = float3(u_xlat18) * u_xlat2.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat3, u_xlat3, u_xlat4);
    u_xlat3 = fma(u_xlat3, u_xlat2.xxxx, u_xlat5);
    u_xlat3 = fma(u_xlat0, u_xlat2.zzzz, u_xlat3);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat4);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat3.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat3.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat3.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat3.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat3.xyz = fma(u_xlat0.xyz, u_xlat3.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = fma(u_xlat2.x, u_xlat2.x, (-u_xlat18));
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat4.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat4.z = dot(VGlobals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat18), u_xlat4.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat0.xyz, u_xlat3.xyz, u_xlat2.xyz);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_WorldToObject at 336
  Matrix4x4 unity_MatrixVP at 400
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 _MainTex_ST at 464
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat1;
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat2.xyz = float3(u_xlat18) * u_xlat2.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat3 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat3, u_xlat3, u_xlat4);
    u_xlat3 = fma(u_xlat3, u_xlat2.xxxx, u_xlat5);
    u_xlat3 = fma(u_xlat0, u_xlat2.zzzz, u_xlat3);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat4);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat3.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat3.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat3.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat3.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat3.xyz = fma(u_xlat0.xyz, u_xlat3.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = fma(u_xlat2.x, u_xlat2.x, (-u_xlat18));
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat4.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat4.z = dot(VGlobals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat18), u_xlat4.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat0.xyz, u_xlat3.xyz, u_xlat2.xyz);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 64
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_ParticleUVShiftData at 128
  Float unity_ParticleUseMeshColors at 144
  Vector4 _MainTex_ST at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat8;
    uint2 u_xlatu8;
    float u_xlat15;
    float u_xlat21;
    uint u_xlatu21;
    bool u_xlatb21;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat0.xyz));
    u_xlat8.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat8.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat8.xyz));
    u_xlat21 = dot(u_xlat4.xyz, u_xlat8.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat2.xyz));
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat8.xyz = float3(u_xlat21) * u_xlat8.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu21 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu21);
    u_xlatu8.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu21 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu21);
    u_xlat4.yz = float2(u_xlatu8.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat21 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat21 = floor(u_xlat21);
    u_xlat1.x = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat15 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.w, u_xlat15);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb21 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb21)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat21 = u_xlat0.y * u_xlat0.y;
    u_xlat21 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat21));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat21), u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 1 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 2 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 1

Constant Buffer "FGlobals" (376 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Float _Metallic at 368
  Float _Glossiness at 372
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlatb40 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb40){
        u_xlatb41 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat42 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat42);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat41) * FGlobals._LightColor0.xyz;
    if(u_xlatb40){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 64
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_ParticleUVShiftData at 128
  Float unity_ParticleUseMeshColors at 144
  Vector4 _MainTex_ST at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat8;
    uint2 u_xlatu8;
    float u_xlat15;
    float u_xlat21;
    uint u_xlatu21;
    bool u_xlatb21;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat0.xyz));
    u_xlat8.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat8.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat8.xyz));
    u_xlat21 = dot(u_xlat4.xyz, u_xlat8.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat2.xyz));
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat8.xyz = float3(u_xlat21) * u_xlat8.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu21 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu21);
    u_xlatu8.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu21 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu21);
    u_xlat4.yz = float2(u_xlatu8.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat21 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat21 = floor(u_xlat21);
    u_xlat1.x = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat15 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.w, u_xlat15);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb21 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb21)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat21 = u_xlat0.y * u_xlat0.y;
    u_xlat21 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat21));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat21), u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
  Vector4 _MainTex_ST at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    bool u_xlatb1;
    float4 u_xlat2;
    uint3 u_xlatu2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat8;
    float u_xlat15;
    float u_xlat24;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat0;
    u_xlat8.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat8.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat24 = float(1.0) / float(u_xlat24);
    u_xlat8.xyz = u_xlat8.xyz * float3(u_xlat24);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat8.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat8.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat8.xyz));
    u_xlat8.xyz = float3(u_xlat24) * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(u_xlat24);
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat8.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat8.x = rsqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat8.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu2.x = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu2.x);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu2.z = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.yzw = float3(u_xlatu2.xyz);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat2.x = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat1.x = fma((-u_xlat2.x), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat3.y = fma((-u_xlat2.x), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat3.xy);
    u_xlatb1 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat2.xy = (bool(u_xlatb1)) ? u_xlat2.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat2.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat8.y * u_xlat8.y;
    u_xlat1.x = fma(u_xlat8.x, u_xlat8.x, (-u_xlat1.x));
    u_xlat2 = u_xlat8.yzzx * u_xlat8.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat0.zw;
    output.TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_ParticleUVShiftData at 144
  Float unity_ParticleUseMeshColors at 160
  Vector4 _MainTex_ST at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    bool u_xlatb1;
    float4 u_xlat2;
    uint3 u_xlatu2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat8;
    float u_xlat15;
    float u_xlat24;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat0;
    u_xlat8.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat8.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat24 = float(1.0) / float(u_xlat24);
    u_xlat8.xyz = u_xlat8.xyz * float3(u_xlat24);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat8.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat8.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat8.xyz));
    u_xlat8.xyz = float3(u_xlat24) * u_xlat8.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(u_xlat24);
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat8.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat8.x = rsqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat8.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu2.x = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu2.x);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu2.z = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.yzw = float3(u_xlatu2.xyz);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat2.x = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat1.x = fma((-u_xlat2.x), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat3.y = fma((-u_xlat2.x), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat3.xy);
    u_xlatb1 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat2.xy = (bool(u_xlatb1)) ? u_xlat2.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat2.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat8.y * u_xlat8.y;
    u_xlat1.x = fma(u_xlat8.x, u_xlat8.x, (-u_xlat1.x));
    u_xlat2 = u_xlat8.yzzx * u_xlat8.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat0.zw;
    output.TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (392 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Vector3 _EmissionColor at 368
  Float _Metallic at 384
  Float _Glossiness at 388
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb43 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb43){
        u_xlatb44 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb44)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat44 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat44, u_xlat45);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat44 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat44 = clamp(u_xlat44, 0.0f, 1.0f);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat44) * FGlobals._LightColor0.xyz;
    if(u_xlatb43){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD3.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 1 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 2 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 1

Constant Buffer "FGlobals" (376 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Float _Metallic at 368
  Float _Glossiness at 372
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlatb40 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb40){
        u_xlatb41 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat42 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat42);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat41) * FGlobals._LightColor0.xyz;
    if(u_xlatb40){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 4
Set 2D Texture "_ShadowMapTexture" to slot 2
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 4 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 1

Constant Buffer "FGlobals" (488 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Vector3 _EmissionColor at 464
  Float _Metallic at 480
  Float _Glossiness at 484
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    bool u_xlatb45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = (-u_xlat43) + u_xlat44;
    u_xlat43 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat44, u_xlat43);
    u_xlat43 = fma(u_xlat43, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
    u_xlatb44 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb44){
        u_xlatb45 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb45)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat45 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat46 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat46);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat45 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat46 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat45 = u_xlat45 + (-u_xlat46);
    u_xlat43 = fma(u_xlat43, u_xlat45, u_xlat46);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat43) * FGlobals._LightColor0.xyz;
    if(u_xlatb44){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD3.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (472 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Float _Metallic at 464
  Float _Glossiness at 468
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    bool u_xlatb42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat41, u_xlat40);
    u_xlat40 = fma(u_xlat40, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat40 = clamp(u_xlat40, 0.0f, 1.0f);
    u_xlatb41 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb41){
        u_xlatb42 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb42)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat42 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat17 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat42, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat42 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat42 = clamp(u_xlat42, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat42 = u_xlat42 + (-u_xlat4.x);
    u_xlat40 = fma(u_xlat40, u_xlat42, u_xlat4.x);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat40) * FGlobals._LightColor0.xyz;
    if(u_xlatb41){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 4
Set 2D Texture "_ShadowMapTexture" to slot 2
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 4 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 1

Constant Buffer "FGlobals" (488 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Vector3 _EmissionColor at 464
  Float _Metallic at 480
  Float _Glossiness at 484
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    bool u_xlatb45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = (-u_xlat43) + u_xlat44;
    u_xlat43 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat44, u_xlat43);
    u_xlat43 = fma(u_xlat43, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
    u_xlatb44 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb44){
        u_xlatb45 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb45)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat45 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat46 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat46);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat45 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat46 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat45 = u_xlat45 + (-u_xlat46);
    u_xlat43 = fma(u_xlat43, u_xlat45, u_xlat46);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat43) * FGlobals._LightColor0.xyz;
    if(u_xlatb44){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD3.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (472 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Float _Metallic at 464
  Float _Glossiness at 468
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    bool u_xlatb42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat41, u_xlat40);
    u_xlat40 = fma(u_xlat40, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat40 = clamp(u_xlat40, 0.0f, 1.0f);
    u_xlatb41 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb41){
        u_xlatb42 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb42)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat42 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat17 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat42, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat42 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat42 = clamp(u_xlat42, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat42 = u_xlat42 + (-u_xlat4.x);
    u_xlat40 = fma(u_xlat40, u_xlat42, u_xlat4.x);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat40) * FGlobals._LightColor0.xyz;
    if(u_xlatb41){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (392 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Vector3 _EmissionColor at 368
  Float _Metallic at 384
  Float _Glossiness at 388
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb43 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb43){
        u_xlatb44 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb44)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat44 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat44, u_xlat45);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat44 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat44 = clamp(u_xlat44, 0.0f, 1.0f);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat44) * FGlobals._LightColor0.xyz;
    if(u_xlatb43){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD3.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 1 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 2 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 1

Constant Buffer "FGlobals" (376 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Float _Metallic at 368
  Float _Glossiness at 372
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlatb40 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb40){
        u_xlatb41 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat42 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat42);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat41) * FGlobals._LightColor0.xyz;
    if(u_xlatb40){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (392 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Vector3 _EmissionColor at 368
  Float _Metallic at 384
  Float _Glossiness at 388
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb43 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb43){
        u_xlatb44 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb44)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat44 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat44, u_xlat45);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat44 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat44 = clamp(u_xlat44, 0.0f, 1.0f);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat44) * FGlobals._LightColor0.xyz;
    if(u_xlatb43){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD4.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 1 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 2 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 1

Constant Buffer "FGlobals" (376 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Float _Metallic at 368
  Float _Glossiness at 372
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlatb40 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb40){
        u_xlatb41 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat42 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat42);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat41) * FGlobals._LightColor0.xyz;
    if(u_xlatb40){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SHADOWS_SCREEN SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 4
Set 2D Texture "_ShadowMapTexture" to slot 2
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 4 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 1

Constant Buffer "FGlobals" (488 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Vector3 _EmissionColor at 464
  Float _Metallic at 480
  Float _Glossiness at 484
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    bool u_xlatb45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = (-u_xlat43) + u_xlat44;
    u_xlat43 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat44, u_xlat43);
    u_xlat43 = fma(u_xlat43, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
    u_xlatb44 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb44){
        u_xlatb45 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb45)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat45 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat46 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat46);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat45 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat46 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat45 = u_xlat45 + (-u_xlat46);
    u_xlat43 = fma(u_xlat43, u_xlat45, u_xlat46);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat43) * FGlobals._LightColor0.xyz;
    if(u_xlatb44){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD4.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SHADOWS_SCREEN SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (472 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Float _Metallic at 464
  Float _Glossiness at 468
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    bool u_xlatb42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat41, u_xlat40);
    u_xlat40 = fma(u_xlat40, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat40 = clamp(u_xlat40, 0.0f, 1.0f);
    u_xlatb41 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb41){
        u_xlatb42 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb42)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat42 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat17 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat42, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat42 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat42 = clamp(u_xlat42, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat42 = u_xlat42 + (-u_xlat4.x);
    u_xlat40 = fma(u_xlat40, u_xlat42, u_xlat4.x);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat40) * FGlobals._LightColor0.xyz;
    if(u_xlatb41){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 4
Set 2D Texture "_ShadowMapTexture" to slot 2
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 4 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 1

Constant Buffer "FGlobals" (488 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Vector3 _EmissionColor at 464
  Float _Metallic at 480
  Float _Glossiness at 484
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    bool u_xlatb45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = (-u_xlat43) + u_xlat44;
    u_xlat43 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat44, u_xlat43);
    u_xlat43 = fma(u_xlat43, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
    u_xlatb44 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb44){
        u_xlatb45 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb45)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat45 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat46 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat46);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat45 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat46 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat45 = u_xlat45 + (-u_xlat46);
    u_xlat43 = fma(u_xlat43, u_xlat45, u_xlat46);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat43) * FGlobals._LightColor0.xyz;
    if(u_xlatb44){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD4.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (472 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Float _Metallic at 464
  Float _Glossiness at 468
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    bool u_xlatb42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat41, u_xlat40);
    u_xlat40 = fma(u_xlat40, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat40 = clamp(u_xlat40, 0.0f, 1.0f);
    u_xlatb41 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb41){
        u_xlatb42 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb42)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat42 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat17 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat42, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat42 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat42 = clamp(u_xlat42, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat42 = u_xlat42 + (-u_xlat4.x);
    u_xlat40 = fma(u_xlat40, u_xlat42, u_xlat4.x);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat40) * FGlobals._LightColor0.xyz;
    if(u_xlatb41){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (392 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Vector3 _EmissionColor at 368
  Float _Metallic at 384
  Float _Glossiness at 388
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb43 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb43){
        u_xlatb44 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb44)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat44 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat44, u_xlat45);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat44 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat44 = clamp(u_xlat44, 0.0f, 1.0f);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat44) * FGlobals._LightColor0.xyz;
    if(u_xlatb43){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD4.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 256
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHBr at 192
  Vector4 unity_SHBg at 208
  Vector4 unity_SHBb at 224
  Vector4 unity_SHC at 240
  Vector4 unity_ParticleUVShiftData at 320
  Float unity_ParticleUseMeshColors at 336
  Vector4 _MainTex_ST at 352
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    uint2 u_xlatu9;
    float u_xlat17;
    float u_xlat24;
    uint u_xlatu24;
    bool u_xlatb24;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat9.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat9.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat17 = dot(u_xlat3, u_xlat0);
    u_xlat6.y = dot(u_xlat3, input.POSITION0);
    u_xlat7 = float4(u_xlat17) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat9.x;
    u_xlat5.y = u_xlat9.z;
    u_xlat9.x = dot(u_xlat4, u_xlat0);
    u_xlat6.x = dot(u_xlat4, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat9.xxxx, u_xlat7);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    u_xlat6.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat7);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat0.xyz));
    u_xlat9.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat9.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat9.xyz));
    u_xlat24 = dot(u_xlat4.xyz, u_xlat9.xyz);
    u_xlat24 = float(1.0) / float(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat2.xyz));
    u_xlat2.xyz = float3(u_xlat24) * u_xlat2.xyz;
    u_xlat9.xyz = float3(u_xlat24) * u_xlat9.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat9.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat3 = (-u_xlat6.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat6.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat5 = (-u_xlat6.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat6 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat6, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu24 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat7.x = float(u_xlatu24);
    u_xlatu9.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu24 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat7.w = float(u_xlatu24);
    u_xlat7.yz = float2(u_xlatu9.xy);
    u_xlat2 = u_xlat6 * u_xlat7;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat24 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat24 = floor(u_xlat24);
    u_xlat1.x = fma((-u_xlat24), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat17 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat24), VGlobals.unity_ParticleUVShiftData.w, u_xlat17);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb24 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb24)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1 = u_xlat0.yyyy * u_xlat4;
    u_xlat2 = u_xlat4 * u_xlat4;
    u_xlat2 = fma(u_xlat3, u_xlat3, u_xlat2);
    u_xlat1 = fma(u_xlat3, u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(u_xlat5, u_xlat0.zzzz, u_xlat1);
    u_xlat2 = fma(u_xlat5, u_xlat5, u_xlat2);
    u_xlat2 = max(u_xlat2, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat2);
    u_xlat2 = fma(u_xlat2, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat2 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat2 * u_xlat1;
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat1.www, u_xlat1.xyz);
    u_xlat2.xyz = fma(u_xlat1.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat2.xyz = fma(u_xlat1.xyz, u_xlat2.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat24 = u_xlat0.y * u_xlat0.y;
    u_xlat24 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat24));
    u_xlat3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat3);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat3);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat3);
    u_xlat0.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat24), u_xlat0.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat1.xyz, u_xlat2.xyz, u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 256
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHBr at 192
  Vector4 unity_SHBg at 208
  Vector4 unity_SHBb at 224
  Vector4 unity_SHC at 240
  Vector4 unity_ParticleUVShiftData at 320
  Float unity_ParticleUseMeshColors at 336
  Vector4 _MainTex_ST at 352
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    uint2 u_xlatu9;
    float u_xlat17;
    float u_xlat24;
    uint u_xlatu24;
    bool u_xlatb24;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat9.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat9.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat17 = dot(u_xlat3, u_xlat0);
    u_xlat6.y = dot(u_xlat3, input.POSITION0);
    u_xlat7 = float4(u_xlat17) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat9.x;
    u_xlat5.y = u_xlat9.z;
    u_xlat9.x = dot(u_xlat4, u_xlat0);
    u_xlat6.x = dot(u_xlat4, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat9.xxxx, u_xlat7);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    u_xlat6.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat7);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat0.xyz));
    u_xlat9.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat9.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat9.xyz));
    u_xlat24 = dot(u_xlat4.xyz, u_xlat9.xyz);
    u_xlat24 = float(1.0) / float(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat2.xyz));
    u_xlat2.xyz = float3(u_xlat24) * u_xlat2.xyz;
    u_xlat9.xyz = float3(u_xlat24) * u_xlat9.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat9.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat3 = (-u_xlat6.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat6.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat5 = (-u_xlat6.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat6 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat6, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu24 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat7.x = float(u_xlatu24);
    u_xlatu9.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu24 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat7.w = float(u_xlatu24);
    u_xlat7.yz = float2(u_xlatu9.xy);
    u_xlat2 = u_xlat6 * u_xlat7;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat24 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat24 = floor(u_xlat24);
    u_xlat1.x = fma((-u_xlat24), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat17 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat24), VGlobals.unity_ParticleUVShiftData.w, u_xlat17);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb24 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb24)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1 = u_xlat0.yyyy * u_xlat4;
    u_xlat2 = u_xlat4 * u_xlat4;
    u_xlat2 = fma(u_xlat3, u_xlat3, u_xlat2);
    u_xlat1 = fma(u_xlat3, u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(u_xlat5, u_xlat0.zzzz, u_xlat1);
    u_xlat2 = fma(u_xlat5, u_xlat5, u_xlat2);
    u_xlat2 = max(u_xlat2, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat2);
    u_xlat2 = fma(u_xlat2, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat2 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat2 * u_xlat1;
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat1.www, u_xlat1.xyz);
    u_xlat2.xyz = fma(u_xlat1.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat2.xyz = fma(u_xlat1.xyz, u_xlat2.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat24 = u_xlat0.y * u_xlat0.y;
    u_xlat24 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat24));
    u_xlat3 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat3);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat3);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat3);
    u_xlat0.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat24), u_xlat0.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat1.xyz, u_xlat2.xyz, u_xlat0.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 unity_ParticleUVShiftData at 336
  Float unity_ParticleUseMeshColors at 352
  Vector4 _MainTex_ST at 368
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    bool u_xlatb1;
    float4 u_xlat2;
    uint3 u_xlatu2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    float u_xlat17;
    float u_xlat27;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat9.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat9.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat17 = dot(u_xlat3, u_xlat0);
    u_xlat6.y = dot(u_xlat3, input.POSITION0);
    u_xlat7 = float4(u_xlat17) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat9.x;
    u_xlat5.y = u_xlat9.z;
    u_xlat9.x = dot(u_xlat4, u_xlat0);
    u_xlat6.x = dot(u_xlat4, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat9.xxxx, u_xlat7);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    u_xlat6.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat7);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat0;
    u_xlat9.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat9.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat9.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat27 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat27 = float(1.0) / float(u_xlat27);
    u_xlat9.xyz = u_xlat9.xyz * float3(u_xlat27);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat9.xyz);
    u_xlat9.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat9.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat9.xyz));
    u_xlat9.xyz = float3(u_xlat27) * u_xlat9.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(u_xlat27);
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat9.xyz);
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = rsqrt(u_xlat9.x);
    u_xlat9.xyz = u_xlat9.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat9.xyz;
    output.TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat3 = (-u_xlat6.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat6.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat5 = (-u_xlat6.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat6 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat6, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu2.x = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu2.z = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat7.yzw = float3(u_xlatu2.xyz);
    u_xlat2 = u_xlat6 * u_xlat7;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat2.x = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat1.x = fma((-u_xlat2.x), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat6.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat6.y = fma((-u_xlat2.x), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat6.xy);
    u_xlatb1 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat2.xy = (bool(u_xlatb1)) ? u_xlat2.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat2.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat2 = u_xlat9.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat3, u_xlat3, u_xlat4);
    u_xlat2 = fma(u_xlat3, u_xlat9.xxxx, u_xlat2);
    u_xlat2 = fma(u_xlat5, u_xlat9.zzzz, u_xlat2);
    u_xlat3 = fma(u_xlat5, u_xlat5, u_xlat4);
    u_xlat3 = max(u_xlat3, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat3);
    u_xlat3 = fma(u_xlat3, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat2 = u_xlat3 * u_xlat2;
    u_xlat3.xyz = u_xlat2.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat3.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat2.www, u_xlat2.xyz);
    u_xlat3.xyz = fma(u_xlat2.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat3.xyz = fma(u_xlat2.xyz, u_xlat3.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat1.x = u_xlat9.y * u_xlat9.y;
    u_xlat1.x = fma(u_xlat9.x, u_xlat9.x, (-u_xlat1.x));
    u_xlat4 = u_xlat9.yzzx * u_xlat9.xyzz;
    u_xlat5.x = dot(VGlobals.unity_SHBr, u_xlat4);
    u_xlat5.y = dot(VGlobals.unity_SHBg, u_xlat4);
    u_xlat5.z = dot(VGlobals.unity_SHBb, u_xlat4);
    u_xlat1.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat1.xxx, u_xlat5.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat2.xyz, u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat0.zw;
    output.TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 unity_ParticleUVShiftData at 336
  Float unity_ParticleUseMeshColors at 352
  Vector4 _MainTex_ST at 368
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    bool u_xlatb1;
    float4 u_xlat2;
    uint3 u_xlatu2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    float u_xlat17;
    float u_xlat27;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat9.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat9.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat17 = dot(u_xlat3, u_xlat0);
    u_xlat6.y = dot(u_xlat3, input.POSITION0);
    u_xlat7 = float4(u_xlat17) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat9.x;
    u_xlat5.y = u_xlat9.z;
    u_xlat9.x = dot(u_xlat4, u_xlat0);
    u_xlat6.x = dot(u_xlat4, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat9.xxxx, u_xlat7);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    u_xlat6.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat7);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat0;
    u_xlat9.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat9.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat9.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat27 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat27 = float(1.0) / float(u_xlat27);
    u_xlat9.xyz = u_xlat9.xyz * float3(u_xlat27);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat9.xyz);
    u_xlat9.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat9.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat9.xyz));
    u_xlat9.xyz = float3(u_xlat27) * u_xlat9.xyz;
    u_xlat2.xyz = u_xlat2.xyz * float3(u_xlat27);
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat9.xyz);
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = rsqrt(u_xlat9.x);
    u_xlat9.xyz = u_xlat9.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat9.xyz;
    output.TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat3 = (-u_xlat6.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat6.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat5 = (-u_xlat6.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat6 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat6, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu2.x = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat7.x = float(u_xlatu2.x);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu2.z = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat7.yzw = float3(u_xlatu2.xyz);
    u_xlat2 = u_xlat6 * u_xlat7;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat2.x = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat1.x = fma((-u_xlat2.x), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat6.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat6.y = fma((-u_xlat2.x), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat2.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat6.xy);
    u_xlatb1 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat2.xy = (bool(u_xlatb1)) ? u_xlat2.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat2.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat2 = u_xlat9.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat3, u_xlat3, u_xlat4);
    u_xlat2 = fma(u_xlat3, u_xlat9.xxxx, u_xlat2);
    u_xlat2 = fma(u_xlat5, u_xlat9.zzzz, u_xlat2);
    u_xlat3 = fma(u_xlat5, u_xlat5, u_xlat4);
    u_xlat3 = max(u_xlat3, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat3);
    u_xlat3 = fma(u_xlat3, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat2 = u_xlat3 * u_xlat2;
    u_xlat3.xyz = u_xlat2.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat3.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat2.www, u_xlat2.xyz);
    u_xlat3.xyz = fma(u_xlat2.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat3.xyz = fma(u_xlat2.xyz, u_xlat3.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat1.x = u_xlat9.y * u_xlat9.y;
    u_xlat1.x = fma(u_xlat9.x, u_xlat9.x, (-u_xlat1.x));
    u_xlat4 = u_xlat9.yzzx * u_xlat9.xyzz;
    u_xlat5.x = dot(VGlobals.unity_SHBr, u_xlat4);
    u_xlat5.y = dot(VGlobals.unity_SHBg, u_xlat4);
    u_xlat5.z = dot(VGlobals.unity_SHBb, u_xlat4);
    u_xlat1.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat1.xxx, u_xlat5.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat2.xyz, u_xlat3.xyz, u_xlat1.xyz);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat0.zw;
    output.TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixV at 208
  Matrix4x4 unity_MatrixVP at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat9 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat9);
    output.TEXCOORD3.z = (-u_xlat9);
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    u_xlat2.xz = u_xlat1.xz * float2(0.5, 0.5);
    u_xlat9 = u_xlat1.y * VGlobals._ProjectionParams.x;
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat2.w = u_xlat9 * 0.5;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat9 = u_xlat0.y * u_xlat0.y;
    u_xlat9 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat9));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat9), u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixV at 208
  Matrix4x4 unity_MatrixVP at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat9 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat9);
    output.TEXCOORD3.z = (-u_xlat9);
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    u_xlat2.xz = u_xlat1.xz * float2(0.5, 0.5);
    u_xlat9 = u_xlat1.y * VGlobals._ProjectionParams.x;
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat2.w = u_xlat9 * 0.5;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat9 = u_xlat0.y * u_xlat0.y;
    u_xlat9 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat9));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat9), u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SHADOWS_SCREEN SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixV at 208
  Matrix4x4 unity_MatrixVP at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float u_xlat14;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat2.xyz = float3(u_xlat14) * u_xlat2.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat14 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat14 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat14);
    u_xlat14 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat14);
    u_xlat14 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat14);
    output.TEXCOORD3.z = (-u_xlat14);
    u_xlat3.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat3.x = float(0.5);
    u_xlat3.z = float(0.5);
    u_xlat3.y = VGlobals._ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat3.xyz;
    output.TEXCOORD6.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat3.w = u_xlat3.y * 0.5;
    output.TEXCOORD6.xy = u_xlat3.zz + u_xlat3.xw;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixV at 208
  Matrix4x4 unity_MatrixVP at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float u_xlat14;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat2.xyz = float3(u_xlat14) * u_xlat2.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat14 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat14 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat14);
    u_xlat14 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat14);
    u_xlat14 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat14);
    output.TEXCOORD3.z = (-u_xlat14);
    u_xlat3.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat3.x = float(0.5);
    u_xlat3.z = float(0.5);
    u_xlat3.y = VGlobals._ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat0.xyw * u_xlat3.xyz;
    output.TEXCOORD6.zw = u_xlat0.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat3.w = u_xlat3.y * 0.5;
    output.TEXCOORD6.xy = u_xlat3.zz + u_xlat3.xw;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SOFTPARTICLES_ON VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (544 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_WorldToObject at 336
  Matrix4x4 unity_MatrixV at 400
  Matrix4x4 unity_MatrixVP at 464
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 _MainTex_ST at 528
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float u_xlat15;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat2.xyz = float3(u_xlat15) * u_xlat2.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat15 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat15 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat15);
    u_xlat15 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat15);
    u_xlat15 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat15);
    output.TEXCOORD3.z = (-u_xlat15);
    u_xlat3.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    u_xlat3.xz = u_xlat1.xz * float2(0.5, 0.5);
    u_xlat15 = u_xlat1.y * VGlobals._ProjectionParams.x;
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat3.w = u_xlat15 * 0.5;
    output.TEXCOORD3.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = fma(u_xlat1, u_xlat1, u_xlat3);
    u_xlat1 = fma(u_xlat1, u_xlat2.xxxx, u_xlat4);
    u_xlat1 = fma(u_xlat0, u_xlat2.zzzz, u_xlat1);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat3);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat1.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat15 = u_xlat2.y * u_xlat2.y;
    u_xlat15 = fma(u_xlat2.x, u_xlat2.x, (-u_xlat15));
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat15), u_xlat3.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, u_xlat2.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SOFTPARTICLES_ON VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (544 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_WorldToObject at 336
  Matrix4x4 unity_MatrixV at 400
  Matrix4x4 unity_MatrixVP at 464
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 _MainTex_ST at 528
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float u_xlat15;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat2.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat2.xyz = float3(u_xlat15) * u_xlat2.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat15 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat15 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat15);
    u_xlat15 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat15);
    u_xlat15 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat15);
    output.TEXCOORD3.z = (-u_xlat15);
    u_xlat3.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    u_xlat3.xz = u_xlat1.xz * float2(0.5, 0.5);
    u_xlat15 = u_xlat1.y * VGlobals._ProjectionParams.x;
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat3.w = u_xlat15 * 0.5;
    output.TEXCOORD3.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat1 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = fma(u_xlat1, u_xlat1, u_xlat3);
    u_xlat1 = fma(u_xlat1, u_xlat2.xxxx, u_xlat4);
    u_xlat1 = fma(u_xlat0, u_xlat2.zzzz, u_xlat1);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat3);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat1.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat15 = u_xlat2.y * u_xlat2.y;
    u_xlat15 = fma(u_xlat2.x, u_xlat2.x, (-u_xlat15));
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat15), u_xlat3.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, u_xlat2.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL SHADOWS_SCREEN SOFTPARTICLES_ON VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (544 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_WorldToObject at 336
  Matrix4x4 unity_MatrixV at 400
  Matrix4x4 unity_MatrixVP at 464
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 _MainTex_ST at 528
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    u_xlat3.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3.xyz = float3(u_xlat18) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat18 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat18 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat18);
    u_xlat18 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat18);
    u_xlat18 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat18);
    output.TEXCOORD3.z = (-u_xlat18);
    u_xlat4.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat4.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat4.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat4.x = float(0.5);
    u_xlat4.z = float(0.5);
    u_xlat4.y = VGlobals._ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat4.xyz = u_xlat2.xyw * u_xlat4.xyz;
    output.TEXCOORD6.zw = u_xlat2.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat2 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat5 = u_xlat3.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat2 = fma(u_xlat1, u_xlat1, u_xlat2);
    u_xlat1 = fma(u_xlat1, u_xlat3.xxxx, u_xlat5);
    u_xlat1 = fma(u_xlat0, u_xlat3.zzzz, u_xlat1);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat2);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat1.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat18 = u_xlat3.y * u_xlat3.y;
    u_xlat18 = fma(u_xlat3.x, u_xlat3.x, (-u_xlat18));
    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat18), u_xlat3.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, u_xlat2.xyz);
    u_xlat4.w = u_xlat4.y * 0.5;
    output.TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN SOFTPARTICLES_ON VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (544 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_WorldToObject at 336
  Matrix4x4 unity_MatrixV at 400
  Matrix4x4 unity_MatrixVP at 464
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 _MainTex_ST at 528
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat2;
    u_xlat3.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3.xyz = float3(u_xlat18) * u_xlat3.xyz;
    output.TEXCOORD0.xyz = u_xlat3.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat18 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat18 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat18);
    u_xlat18 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat18);
    u_xlat18 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat18);
    output.TEXCOORD3.z = (-u_xlat18);
    u_xlat4.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat4.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat4.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat4.x = float(0.5);
    u_xlat4.z = float(0.5);
    u_xlat4.y = VGlobals._ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xyz;
    u_xlat4.xyz = u_xlat2.xyw * u_xlat4.xyz;
    output.TEXCOORD6.zw = u_xlat2.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat2 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat5 = u_xlat3.yyyy * u_xlat2;
    u_xlat2 = u_xlat2 * u_xlat2;
    u_xlat2 = fma(u_xlat1, u_xlat1, u_xlat2);
    u_xlat1 = fma(u_xlat1, u_xlat3.xxxx, u_xlat5);
    u_xlat1 = fma(u_xlat0, u_xlat3.zzzz, u_xlat1);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat2);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat2 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat1.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat18 = u_xlat3.y * u_xlat3.y;
    u_xlat18 = fma(u_xlat3.x, u_xlat3.x, (-u_xlat18));
    u_xlat2 = u_xlat3.yzzx * u_xlat3.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat18), u_xlat3.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, u_xlat2.xyz);
    u_xlat4.w = u_xlat4.y * 0.5;
    output.TEXCOORD6.xy = u_xlat4.zz + u_xlat4.xw;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_ParticleUVShiftData at 208
  Float unity_ParticleUseMeshColors at 224
  Vector4 _MainTex_ST at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat15;
    float u_xlat22;
    uint u_xlatu22;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat7.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat7.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat7.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat22 = float(1.0) / float(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * float3(u_xlat22);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat7.xyz));
    u_xlat7.xyz = float3(u_xlat22) * u_xlat7.xyz;
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat7.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu22 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu22);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu22 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu22);
    u_xlat4.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat22 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat22 = floor(u_xlat22);
    u_xlat1.x = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat15 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat8.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat8.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat8.xyz = u_xlat8.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat8.y * VGlobals._ProjectionParams.x;
    u_xlat2.w = u_xlat0.x * 0.5;
    u_xlat2.xz = u_xlat8.xz * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat8.z;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat0.x = u_xlat7.y * u_xlat7.y;
    u_xlat0.x = fma(u_xlat7.x, u_xlat7.x, (-u_xlat0.x));
    u_xlat1 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 1 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 2 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 1

Constant Buffer "FGlobals" (376 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Float _Metallic at 368
  Float _Glossiness at 372
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlatb40 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb40){
        u_xlatb41 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat42 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat42);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat41) * FGlobals._LightColor0.xyz;
    if(u_xlatb40){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_ParticleUVShiftData at 208
  Float unity_ParticleUseMeshColors at 224
  Vector4 _MainTex_ST at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat15;
    float u_xlat22;
    uint u_xlatu22;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat7.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat7.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat7.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat22 = float(1.0) / float(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * float3(u_xlat22);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat7.xyz));
    u_xlat7.xyz = float3(u_xlat22) * u_xlat7.xyz;
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat7.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu22 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu22);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu22 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu22);
    u_xlat4.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat22 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat22 = floor(u_xlat22);
    u_xlat1.x = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat15 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat8.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat8.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat8.xyz = u_xlat8.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat8.y * VGlobals._ProjectionParams.x;
    u_xlat2.w = u_xlat0.x * 0.5;
    u_xlat2.xz = u_xlat8.xz * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat8.z;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat0.x = u_xlat7.y * u_xlat7.y;
    u_xlat0.x = fma(u_xlat7.x, u_xlat7.x, (-u_xlat0.x));
    u_xlat1 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_ParticleUVShiftData at 208
  Float unity_ParticleUseMeshColors at 224
  Vector4 _MainTex_ST at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat15;
    float u_xlat22;
    uint u_xlatu22;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    u_xlat6 = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat6;
    u_xlat7.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat7.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat7.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat22 = float(1.0) / float(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * float3(u_xlat22);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat7.xyz));
    u_xlat7.xyz = float3(u_xlat22) * u_xlat7.xyz;
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat7.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu22 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu22);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu22 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu22);
    u_xlat4.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat22 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat22 = floor(u_xlat22);
    u_xlat1.x = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat15 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat8.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat8.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat8.xyz = u_xlat8.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    output.TEXCOORD3.w = u_xlat8.z;
    u_xlat2.x = float(0.5);
    u_xlat2.z = float(0.5);
    u_xlat2.y = VGlobals._ProjectionParams.x;
    u_xlat1.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyw;
    output.TEXCOORD6.zw = u_xlat6.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = u_xlat7.y * u_xlat7.y;
    u_xlat0.x = fma(u_xlat7.x, u_xlat7.x, (-u_xlat0.x));
    u_xlat1 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat3.xyz);
    u_xlat2.w = u_xlat2.y * 0.5;
    output.TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_ParticleUVShiftData at 208
  Float unity_ParticleUseMeshColors at 224
  Vector4 _MainTex_ST at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat15;
    float u_xlat22;
    uint u_xlatu22;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    u_xlat6 = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat6;
    u_xlat7.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat7.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat7.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat22 = float(1.0) / float(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * float3(u_xlat22);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat7.xyz));
    u_xlat7.xyz = float3(u_xlat22) * u_xlat7.xyz;
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat7.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu22 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu22);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu22 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu22);
    u_xlat4.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat22 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat22 = floor(u_xlat22);
    u_xlat1.x = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat15 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat8.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat8.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat8.xyz = u_xlat8.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    output.TEXCOORD3.w = u_xlat8.z;
    u_xlat2.x = float(0.5);
    u_xlat2.z = float(0.5);
    u_xlat2.y = VGlobals._ProjectionParams.x;
    u_xlat1.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xyw;
    output.TEXCOORD6.zw = u_xlat6.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.x = u_xlat7.y * u_xlat7.y;
    u_xlat0.x = fma(u_xlat7.x, u_xlat7.x, (-u_xlat0.x));
    u_xlat1 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat3.xyz);
    u_xlat2.w = u_xlat2.y * 0.5;
    output.TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (392 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Vector3 _EmissionColor at 368
  Float _Metallic at 384
  Float _Glossiness at 388
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb43 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb43){
        u_xlatb44 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb44)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat44 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat44, u_xlat45);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat44 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat44 = clamp(u_xlat44, 0.0f, 1.0f);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat44) * FGlobals._LightColor0.xyz;
    if(u_xlatb43){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD4.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 1 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 2 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 1

Constant Buffer "FGlobals" (376 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Float _Metallic at 368
  Float _Glossiness at 372
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlatb40 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb40){
        u_xlatb41 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat42 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat42);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat41) * FGlobals._LightColor0.xyz;
    if(u_xlatb40){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 4
Set 2D Texture "_ShadowMapTexture" to slot 2
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 4 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 1

Constant Buffer "FGlobals" (488 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Vector3 _EmissionColor at 464
  Float _Metallic at 480
  Float _Glossiness at 484
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    bool u_xlatb45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = (-u_xlat43) + u_xlat44;
    u_xlat43 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat44, u_xlat43);
    u_xlat43 = fma(u_xlat43, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
    u_xlatb44 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb44){
        u_xlatb45 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb45)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat45 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat46 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat46);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat45 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat46 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat45 = u_xlat45 + (-u_xlat46);
    u_xlat43 = fma(u_xlat43, u_xlat45, u_xlat46);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat43) * FGlobals._LightColor0.xyz;
    if(u_xlatb44){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD4.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (472 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Float _Metallic at 464
  Float _Glossiness at 468
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    bool u_xlatb42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat41, u_xlat40);
    u_xlat40 = fma(u_xlat40, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat40 = clamp(u_xlat40, 0.0f, 1.0f);
    u_xlatb41 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb41){
        u_xlatb42 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb42)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat42 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat17 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat42, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat42 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat42 = clamp(u_xlat42, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat42 = u_xlat42 + (-u_xlat4.x);
    u_xlat40 = fma(u_xlat40, u_xlat42, u_xlat4.x);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat40) * FGlobals._LightColor0.xyz;
    if(u_xlatb41){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 4
Set 2D Texture "_ShadowMapTexture" to slot 2
Set CUBE Texture "unity_SpecCube0" to slot 3 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 4 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 1

Constant Buffer "FGlobals" (488 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Vector3 _EmissionColor at 464
  Float _Metallic at 480
  Float _Glossiness at 484
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    sampler sampler_EmissionMap [[ sampler (4) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(3) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    bool u_xlatb45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat43 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = (-u_xlat43) + u_xlat44;
    u_xlat43 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat44, u_xlat43);
    u_xlat43 = fma(u_xlat43, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat43 = clamp(u_xlat43, 0.0f, 1.0f);
    u_xlatb44 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb44){
        u_xlatb45 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb45)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat45 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat46 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat46);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat45 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat45 = clamp(u_xlat45, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat46 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat45 = u_xlat45 + (-u_xlat46);
    u_xlat43 = fma(u_xlat43, u_xlat45, u_xlat46);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat43) * FGlobals._LightColor0.xyz;
    if(u_xlatb44){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD4.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_ShadowMapTexture" to slot 1 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (472 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Color at 448
  Float _Metallic at 464
  Float _Glossiness at 468
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat42;
    bool u_xlatb42;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat41, u_xlat40);
    u_xlat40 = fma(u_xlat40, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat40 = clamp(u_xlat40, 0.0f, 1.0f);
    u_xlatb41 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb41){
        u_xlatb42 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb42)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat42 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat17 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat42, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat42 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat42 = clamp(u_xlat42, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat42 = u_xlat42 + (-u_xlat4.x);
    u_xlat40 = fma(u_xlat40, u_xlat42, u_xlat4.x);
    u_xlat42 = (-FGlobals._Glossiness) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat40) * FGlobals._LightColor0.xyz;
    if(u_xlatb41){
        u_xlatb40 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb40)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat40 = u_xlat6.y * 0.25;
        u_xlat41 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat40 = max(u_xlat40, u_xlat41);
        u_xlat6.x = min(u_xlat43, u_xlat40);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD4.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb40 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb40){
        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat40 = rsqrt(u_xlat40);
        u_xlat7.xyz = float3(u_xlat40) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat40 = min(u_xlat8.y, u_xlat8.x);
        u_xlat40 = min(u_xlat8.z, u_xlat40);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat40), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat40 = fma((-u_xlat42), 0.699999988, 1.70000005);
    u_xlat40 = u_xlat40 * u_xlat42;
    u_xlat40 = u_xlat40 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat40));
    u_xlat41 = u_xlat7.w + -1.0;
    u_xlat41 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat41, 1.0);
    u_xlat41 = u_xlat41 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat41);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat40));
        u_xlat40 = u_xlat4.w + -1.0;
        u_xlat40 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat40, 1.0);
        u_xlat40 = u_xlat40 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat40);
        u_xlat7.xyz = fma(float3(u_xlat41), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat40 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat4.xyz = float3(u_xlat40) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat40 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat42));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat41 = u_xlat27 * u_xlat27;
    u_xlat41 = u_xlat41 * u_xlat41;
    u_xlat27 = u_xlat27 * u_xlat41;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat42 * u_xlat42;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat41 = (-u_xlat26) + 1.0;
    u_xlat4.x = fma(abs(u_xlat39), u_xlat41, u_xlat26);
    u_xlat41 = fma(u_xlat1.x, u_xlat41, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat41;
    u_xlat39 = fma(u_xlat1.x, u_xlat4.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat41 = u_xlat26 * u_xlat26;
    u_xlat4.x = fma(u_xlat14, u_xlat41, (-u_xlat14));
    u_xlat14 = fma(u_xlat4.x, u_xlat14, 1.0);
    u_xlat41 = u_xlat41 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat41 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat42;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat40) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat6.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat6.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat5.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat4.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat1.xyw, u_xlat2.xyz);
    output.SV_Target0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 3
Set CUBE Texture "unity_SpecCube0" to slot 2 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 3 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 4 sampler slot 1

Constant Buffer "FGlobals" (392 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Color at 352
  Vector3 _EmissionColor at 368
  Float _Metallic at 384
  Float _Glossiness at 388
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    sampler sampler_EmissionMap [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(2) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(3) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float3 u_xlat14;
    float u_xlat15;
    float u_xlat28;
    float u_xlat29;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    bool u_xlatb44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat2.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat2.xyz = u_xlat2.xyz * FGlobals._Color.xyz;
    u_xlat3.xyz = u_xlat2.xyz * input.COLOR0.xyz;
    u_xlat4.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb43 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb43){
        u_xlatb44 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb44)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat44 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat44, u_xlat45);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat44 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat44 = clamp(u_xlat44, 0.0f, 1.0f);
    u_xlat45 = (-FGlobals._Glossiness) + 1.0;
    u_xlat46 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat46)), (-u_xlat1.xyz));
    u_xlat6.xyz = float3(u_xlat44) * FGlobals._LightColor0.xyz;
    if(u_xlatb43){
        u_xlatb43 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb43)) ? u_xlat7.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat43 = u_xlat7.y * 0.25;
        u_xlat44 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat46 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat43 = max(u_xlat43, u_xlat44);
        u_xlat7.x = min(u_xlat46, u_xlat43);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + float3(0.25, 0.0, 0.0);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + float3(0.5, 0.0, 0.0);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat10.xyz = input.TEXCOORD0.xyz;
        u_xlat10.w = 1.0;
        u_xlat8.x = dot(u_xlat8, u_xlat10);
        u_xlat8.y = dot(u_xlat9, u_xlat10);
        u_xlat8.z = dot(u_xlat7, u_xlat10);
    } else {
        u_xlat7.xyz = input.TEXCOORD0.xyz;
        u_xlat7.w = 1.0;
        u_xlat8.x = dot(FGlobals.unity_SHAr, u_xlat7);
        u_xlat8.y = dot(FGlobals.unity_SHAg, u_xlat7);
        u_xlat8.z = dot(FGlobals.unity_SHAb, u_xlat7);
    }
    u_xlat7.xyz = u_xlat8.xyz + input.TEXCOORD4.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb43 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb43){
        u_xlat43 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat43 = rsqrt(u_xlat43);
        u_xlat8.xyz = float3(u_xlat43) * u_xlat5.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat43 = min(u_xlat9.y, u_xlat9.x);
        u_xlat43 = min(u_xlat9.z, u_xlat43);
        u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat43), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat43 = fma((-u_xlat45), 0.699999988, 1.70000005);
    u_xlat43 = u_xlat43 * u_xlat45;
    u_xlat43 = u_xlat43 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat43));
    u_xlat44 = u_xlat8.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat10.xyz = float3(u_xlat46) * u_xlat5.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat11.y, u_xlat11.x);
            u_xlat46 = min(u_xlat11.z, u_xlat46);
            u_xlat11.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat46), u_xlat11.xyz);
        }
        u_xlat5 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat43));
        u_xlat43 = u_xlat5.w + -1.0;
        u_xlat43 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat43, 1.0);
        u_xlat43 = u_xlat43 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat43);
        u_xlat8.xyz = fma(float3(u_xlat44), u_xlat8.xyz, (-u_xlat5.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat8.xyz, u_xlat5.xyz);
    }
    u_xlat43 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat43 = rsqrt(u_xlat43);
    u_xlat5.xyz = float3(u_xlat43) * input.TEXCOORD0.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    u_xlat2.xyz = fma(float3(FGlobals._Metallic), u_xlat2.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat43 = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat3.xyz = float3(u_xlat43) * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat0.xyz = float3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = dot(u_xlat14.xx, float2(u_xlat45));
    u_xlat14.x = u_xlat14.x + -0.5;
    u_xlat28 = (-u_xlat1.x) + 1.0;
    u_xlat29 = u_xlat28 * u_xlat28;
    u_xlat29 = u_xlat29 * u_xlat29;
    u_xlat28 = u_xlat28 * u_xlat29;
    u_xlat28 = fma(u_xlat14.x, u_xlat28, 1.0);
    u_xlat29 = -abs(u_xlat42) + 1.0;
    u_xlat44 = u_xlat29 * u_xlat29;
    u_xlat44 = u_xlat44 * u_xlat44;
    u_xlat29 = u_xlat29 * u_xlat44;
    u_xlat14.x = fma(u_xlat14.x, u_xlat29, 1.0);
    u_xlat14.x = u_xlat14.x * u_xlat28;
    u_xlat28 = u_xlat45 * u_xlat45;
    u_xlat28 = max(u_xlat28, 0.00200000009);
    u_xlat44 = (-u_xlat28) + 1.0;
    u_xlat46 = fma(abs(u_xlat42), u_xlat44, u_xlat28);
    u_xlat44 = fma(u_xlat1.x, u_xlat44, u_xlat28);
    u_xlat42 = abs(u_xlat42) * u_xlat44;
    u_xlat42 = fma(u_xlat1.x, u_xlat46, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat44 = u_xlat28 * u_xlat28;
    u_xlat46 = fma(u_xlat15, u_xlat44, (-u_xlat15));
    u_xlat15 = fma(u_xlat46, u_xlat15, 1.0);
    u_xlat44 = u_xlat44 * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat44 / u_xlat15;
    u_xlat42 = u_xlat42 * u_xlat15;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat14.z = sqrt(u_xlat42);
    u_xlat14.xz = u_xlat1.xx * u_xlat14.xz;
    u_xlat28 = u_xlat28 * u_xlat45;
    u_xlat28 = fma((-u_xlat28), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat14.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat43) + FGlobals._Glossiness;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(u_xlat42);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat14.x = u_xlat0.x * u_xlat0.x;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat7.xyz = (-u_xlat2.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat7.xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat6.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat5.xyz, u_xlat0.xyw);
    u_xlat3.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat1.xyw = (-u_xlat2.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat29), u_xlat1.xyw, u_xlat2.xyz);
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = fma(u_xlat4.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (448 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 272
  Matrix4x4 unity_MatrixVP at 336
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 unity_ParticleUVShiftData at 400
  Float unity_ParticleUseMeshColors at 416
  Vector4 _MainTex_ST at 432
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat17;
    float u_xlat25;
    uint u_xlatu25;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat9.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat9.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat17 = dot(u_xlat3, u_xlat0);
    u_xlat6.y = dot(u_xlat3, input.POSITION0);
    u_xlat7 = float4(u_xlat17) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat9.x;
    u_xlat5.y = u_xlat9.z;
    u_xlat9.x = dot(u_xlat4, u_xlat0);
    u_xlat6.x = dot(u_xlat4, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat9.xxxx, u_xlat7);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    u_xlat6.z = dot(u_xlat5, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat7);
    output.mtl_Position = u_xlat7 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat8.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat8.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat25 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat25 = float(1.0) / float(u_xlat25);
    u_xlat8.xyz = u_xlat8.xyz * float3(u_xlat25);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat8.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat8.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat8.xyz));
    u_xlat8.xyz = float3(u_xlat25) * u_xlat8.xyz;
    u_xlat2.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat8.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat8.x = rsqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat8.xyz;
    output.TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat3 = (-u_xlat6.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat6.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat5 = (-u_xlat6.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat6 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat6, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu25 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat7.x = float(u_xlatu25);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu25 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat7.w = float(u_xlatu25);
    u_xlat7.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat6 * u_xlat7;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat25 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat25 = floor(u_xlat25);
    u_xlat1.x = fma((-u_xlat25), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat25), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat17 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat17) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat9.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat9.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat9.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat9.xyz = u_xlat9.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat9.y * VGlobals._ProjectionParams.x;
    u_xlat2.w = u_xlat0.x * 0.5;
    u_xlat2.xz = u_xlat9.xz * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat9.z;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1 = u_xlat8.yyyy * u_xlat4;
    u_xlat2 = u_xlat4 * u_xlat4;
    u_xlat2 = fma(u_xlat3, u_xlat3, u_xlat2);
    u_xlat1 = fma(u_xlat3, u_xlat8.xxxx, u_xlat1);
    u_xlat1 = fma(u_xlat5, u_xlat8.zzzz, u_xlat1);
    u_xlat2 = fma(u_xlat5, u_xlat5, u_xlat2);
    u_xlat2 = max(u_xlat2, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat2);
    u_xlat2 = fma(u_xlat2, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat2 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat2 * u_xlat1;
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat1.www, u_xlat1.xyz);
    u_xlat2.xyz = fma(u_xlat1.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat2.xyz = fma(u_xlat1.xyz, u_xlat2.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat0.x = u_xlat8.y * u_xlat8.y;
    u_xlat0.x = fma(u_xlat8.x, u_xlat8.x, (-u_xlat0.x));
    u_xlat3 = u_xlat8.yzzx * u_xlat8.xyzz;
    u_xlat4.x = dot(VGlobals.unity_SHBr, u_xlat3);
    u_xlat4.y = dot(VGlobals.unity_SHBg, u_xlat3);
    u_xlat4.z = dot(VGlobals.unity_SHBb, u_xlat3);
    u_xlat0.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat4.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat1.xyz, u_xlat2.xyz, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (448 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 272
  Matrix4x4 unity_MatrixVP at 336
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 unity_ParticleUVShiftData at 400
  Float unity_ParticleUseMeshColors at 416
  Vector4 _MainTex_ST at 432
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat17;
    float u_xlat25;
    uint u_xlatu25;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat9.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat9.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat17 = dot(u_xlat3, u_xlat0);
    u_xlat6.y = dot(u_xlat3, input.POSITION0);
    u_xlat7 = float4(u_xlat17) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat9.x;
    u_xlat5.y = u_xlat9.z;
    u_xlat9.x = dot(u_xlat4, u_xlat0);
    u_xlat6.x = dot(u_xlat4, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat9.xxxx, u_xlat7);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    u_xlat6.z = dot(u_xlat5, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat7);
    output.mtl_Position = u_xlat7 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat8.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat8.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat25 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat25 = float(1.0) / float(u_xlat25);
    u_xlat8.xyz = u_xlat8.xyz * float3(u_xlat25);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat8.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat8.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat8.xyz));
    u_xlat8.xyz = float3(u_xlat25) * u_xlat8.xyz;
    u_xlat2.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat8.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat8.x = rsqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat8.xyz;
    output.TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat3 = (-u_xlat6.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat6.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat5 = (-u_xlat6.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat6 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat6, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu25 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat7.x = float(u_xlatu25);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu25 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat7.w = float(u_xlatu25);
    u_xlat7.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat6 * u_xlat7;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat25 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat25 = floor(u_xlat25);
    u_xlat1.x = fma((-u_xlat25), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat25), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat17 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat17) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat9.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat9.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat9.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat9.xyz = u_xlat9.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat9.y * VGlobals._ProjectionParams.x;
    u_xlat2.w = u_xlat0.x * 0.5;
    u_xlat2.xz = u_xlat9.xz * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat9.z;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat1 = u_xlat8.yyyy * u_xlat4;
    u_xlat2 = u_xlat4 * u_xlat4;
    u_xlat2 = fma(u_xlat3, u_xlat3, u_xlat2);
    u_xlat1 = fma(u_xlat3, u_xlat8.xxxx, u_xlat1);
    u_xlat1 = fma(u_xlat5, u_xlat8.zzzz, u_xlat1);
    u_xlat2 = fma(u_xlat5, u_xlat5, u_xlat2);
    u_xlat2 = max(u_xlat2, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat2);
    u_xlat2 = fma(u_xlat2, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat2 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat2 * u_xlat1;
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat1.www, u_xlat1.xyz);
    u_xlat2.xyz = fma(u_xlat1.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat2.xyz = fma(u_xlat1.xyz, u_xlat2.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat0.x = u_xlat8.y * u_xlat8.y;
    u_xlat0.x = fma(u_xlat8.x, u_xlat8.x, (-u_xlat0.x));
    u_xlat3 = u_xlat8.yzzx * u_xlat8.xyzz;
    u_xlat4.x = dot(VGlobals.unity_SHBr, u_xlat3);
    u_xlat4.y = dot(VGlobals.unity_SHBg, u_xlat3);
    u_xlat4.z = dot(VGlobals.unity_SHBb, u_xlat3);
    u_xlat0.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat4.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat1.xyz, u_xlat2.xyz, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN SOFTPARTICLES_ON VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (448 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 272
  Matrix4x4 unity_MatrixVP at 336
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 unity_ParticleUVShiftData at 400
  Float unity_ParticleUseMeshColors at 416
  Vector4 _MainTex_ST at 432
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat19;
    float u_xlat28;
    uint u_xlatu28;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat10.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat10.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat19 = dot(u_xlat3, u_xlat0);
    u_xlat6.y = dot(u_xlat3, input.POSITION0);
    u_xlat7 = float4(u_xlat19) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat10.x;
    u_xlat5.y = u_xlat10.z;
    u_xlat10.x = dot(u_xlat4, u_xlat0);
    u_xlat6.x = dot(u_xlat4, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat10.xxxx, u_xlat7);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    u_xlat6.z = dot(u_xlat5, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat7);
    u_xlat7 = u_xlat7 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat7;
    u_xlat9.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat9.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat9.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat28 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat28 = float(1.0) / float(u_xlat28);
    u_xlat9.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat9.xyz);
    u_xlat9.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat9.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat9.xyz));
    u_xlat9.xyz = float3(u_xlat28) * u_xlat9.xyz;
    u_xlat2.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat9.xyz);
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = rsqrt(u_xlat9.x);
    u_xlat9.xyz = u_xlat9.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat9.xyz;
    output.TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat3 = (-u_xlat6.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat6.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat5 = (-u_xlat6.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat6 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat6, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu28 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat8.x = float(u_xlatu28);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu28 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat8.w = float(u_xlatu28);
    u_xlat8.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat6 * u_xlat8;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat28 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat28 = floor(u_xlat28);
    u_xlat1.x = fma((-u_xlat28), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat28), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat19 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat19) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat10.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat10.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat10.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat10.xyz = u_xlat10.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    output.TEXCOORD3.w = u_xlat10.z;
    u_xlat2.x = float(0.5);
    u_xlat2.z = float(0.5);
    u_xlat2.y = VGlobals._ProjectionParams.x;
    u_xlat1.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyw;
    output.TEXCOORD6.zw = u_xlat7.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat9.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat3, u_xlat3, u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat9.xxxx, u_xlat1);
    u_xlat1 = fma(u_xlat5, u_xlat9.zzzz, u_xlat1);
    u_xlat3 = fma(u_xlat5, u_xlat5, u_xlat4);
    u_xlat3 = max(u_xlat3, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat3);
    u_xlat3 = fma(u_xlat3, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat3 * u_xlat1;
    u_xlat3.xyz = u_xlat1.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat3.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat1.zzz, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat1.www, u_xlat1.xyz);
    u_xlat3.xyz = fma(u_xlat1.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat3.xyz = fma(u_xlat1.xyz, u_xlat3.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat0.x = u_xlat9.y * u_xlat9.y;
    u_xlat0.x = fma(u_xlat9.x, u_xlat9.x, (-u_xlat0.x));
    u_xlat4 = u_xlat9.yzzx * u_xlat9.xyzz;
    u_xlat5.x = dot(VGlobals.unity_SHBr, u_xlat4);
    u_xlat5.y = dot(VGlobals.unity_SHBg, u_xlat4);
    u_xlat5.z = dot(VGlobals.unity_SHBb, u_xlat4);
    u_xlat0.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat5.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat1.xyz, u_xlat3.xyz, u_xlat0.xyz);
    u_xlat2.w = u_xlat2.y * 0.5;
    output.TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: DIRECTIONAL LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SHADOWS_SCREEN SOFTPARTICLES_ON VERTEXLIGHT_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (448 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 272
  Matrix4x4 unity_MatrixVP at 336
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 unity_ParticleUVShiftData at 400
  Float unity_ParticleUseMeshColors at 416
  Vector4 _MainTex_ST at 432
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat19;
    float u_xlat28;
    uint u_xlatu28;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat10.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat10.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat19 = dot(u_xlat3, u_xlat0);
    u_xlat6.y = dot(u_xlat3, input.POSITION0);
    u_xlat7 = float4(u_xlat19) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat10.x;
    u_xlat5.y = u_xlat10.z;
    u_xlat10.x = dot(u_xlat4, u_xlat0);
    u_xlat6.x = dot(u_xlat4, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat10.xxxx, u_xlat7);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    u_xlat6.z = dot(u_xlat5, input.POSITION0);
    u_xlat7 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat7);
    u_xlat7 = u_xlat7 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    output.mtl_Position = u_xlat7;
    u_xlat9.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat9.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat9.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat28 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat28 = float(1.0) / float(u_xlat28);
    u_xlat9.xyz = u_xlat9.xyz * float3(u_xlat28);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat9.xyz);
    u_xlat9.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat9.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat9.xyz));
    u_xlat9.xyz = float3(u_xlat28) * u_xlat9.xyz;
    u_xlat2.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat9.xyz);
    u_xlat9.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat9.x = rsqrt(u_xlat9.x);
    u_xlat9.xyz = u_xlat9.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat9.xyz;
    output.TEXCOORD1.xyz = u_xlat6.xyz;
    u_xlat3 = (-u_xlat6.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat6.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat5 = (-u_xlat6.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat6 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat6, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu28 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat8.x = float(u_xlatu28);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu28 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat8.w = float(u_xlatu28);
    u_xlat8.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat6 * u_xlat8;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat28 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat28 = floor(u_xlat28);
    u_xlat1.x = fma((-u_xlat28), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat28), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat19 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat19) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat10.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat10.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat10.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat10.xyz = u_xlat10.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    output.TEXCOORD3.w = u_xlat10.z;
    u_xlat2.x = float(0.5);
    u_xlat2.z = float(0.5);
    u_xlat2.y = VGlobals._ProjectionParams.x;
    u_xlat1.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat7.xyw;
    output.TEXCOORD6.zw = u_xlat7.zw;
    u_xlat1.w = u_xlat1.y * 0.5;
    output.TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat1 = u_xlat9.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat3, u_xlat3, u_xlat4);
    u_xlat1 = fma(u_xlat3, u_xlat9.xxxx, u_xlat1);
    u_xlat1 = fma(u_xlat5, u_xlat9.zzzz, u_xlat1);
    u_xlat3 = fma(u_xlat5, u_xlat5, u_xlat4);
    u_xlat3 = max(u_xlat3, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat3);
    u_xlat3 = fma(u_xlat3, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat4;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat1 = u_xlat3 * u_xlat1;
    u_xlat3.xyz = u_xlat1.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat3.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat1.zzz, u_xlat3.xyz);
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat1.www, u_xlat1.xyz);
    u_xlat3.xyz = fma(u_xlat1.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat3.xyz = fma(u_xlat1.xyz, u_xlat3.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat0.x = u_xlat9.y * u_xlat9.y;
    u_xlat0.x = fma(u_xlat9.x, u_xlat9.x, (-u_xlat0.x));
    u_xlat4 = u_xlat9.yzzx * u_xlat9.xyzz;
    u_xlat5.x = dot(VGlobals.unity_SHBr, u_xlat4);
    u_xlat5.y = dot(VGlobals.unity_SHBg, u_xlat4);
    u_xlat5.z = dot(VGlobals.unity_SHBb, u_xlat4);
    u_xlat0.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat5.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat1.xyz, u_xlat3.xyz, u_xlat0.xyz);
    u_xlat2.w = u_xlat2.y * 0.5;
    output.TEXCOORD6.xy = u_xlat2.zz + u_xlat2.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="DEFERRED" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" "PerformanceChecks"="False" "PreviewType"="Plane" }
  ZWrite [_ZWrite]
  Cull [_Cull]
  Blend [_SrcBlend] [_DstBlend]
 BlendOp [_BlendOp]
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Global Keywords: <none>
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 192
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 _MainTex_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat6));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat6), u_xlat0.xyz);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 192
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 _MainTex_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat6));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat6), u_xlat0.xyz);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat1.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: UNITY_HDR_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 192
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 _MainTex_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat6));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat6), u_xlat0.xyz);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH UNITY_HDR_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_WorldToObject at 128
  Matrix4x4 unity_MatrixVP at 192
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 _MainTex_ST at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat6));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat6), u_xlat0.xyz);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: UNITY_HDR_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: UNITY_HDR_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.SV_Target3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH UNITY_HDR_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH UNITY_HDR_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.SV_Target3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat1.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 64
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_ParticleUVShiftData at 128
  Float unity_ParticleUseMeshColors at 144
  Vector4 _MainTex_ST at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat8;
    uint2 u_xlatu8;
    float u_xlat15;
    float u_xlat21;
    uint u_xlatu21;
    bool u_xlatb21;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat0.xyz));
    u_xlat8.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat8.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat8.xyz));
    u_xlat21 = dot(u_xlat4.xyz, u_xlat8.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat2.xyz));
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat8.xyz = float3(u_xlat21) * u_xlat8.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu21 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu21);
    u_xlatu8.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu21 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu21);
    u_xlat4.yz = float2(u_xlatu8.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat21 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat21 = floor(u_xlat21);
    u_xlat1.x = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat15 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.w, u_xlat15);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb21 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb21)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat21 = u_xlat0.y * u_xlat0.y;
    u_xlat21 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat21));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat21), u_xlat0.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 64
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_ParticleUVShiftData at 128
  Float unity_ParticleUseMeshColors at 144
  Vector4 _MainTex_ST at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat8;
    uint2 u_xlatu8;
    float u_xlat15;
    float u_xlat21;
    uint u_xlatu21;
    bool u_xlatb21;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat0.xyz));
    u_xlat8.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat8.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat8.xyz));
    u_xlat21 = dot(u_xlat4.xyz, u_xlat8.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat2.xyz));
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat8.xyz = float3(u_xlat21) * u_xlat8.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu21 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu21);
    u_xlatu8.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu21 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu21);
    u_xlat4.yz = float2(u_xlatu8.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat21 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat21 = floor(u_xlat21);
    u_xlat1.x = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat15 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.w, u_xlat15);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb21 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb21)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat21 = u_xlat0.y * u_xlat0.y;
    u_xlat21 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat21));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat21), u_xlat0.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat1.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 64
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_ParticleUVShiftData at 128
  Float unity_ParticleUseMeshColors at 144
  Vector4 _MainTex_ST at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat8;
    uint2 u_xlatu8;
    float u_xlat15;
    float u_xlat21;
    uint u_xlatu21;
    bool u_xlatb21;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat0.xyz));
    u_xlat8.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat8.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat8.xyz));
    u_xlat21 = dot(u_xlat4.xyz, u_xlat8.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat2.xyz));
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat8.xyz = float3(u_xlat21) * u_xlat8.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu21 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu21);
    u_xlatu8.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu21 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu21);
    u_xlat4.yz = float2(u_xlatu8.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat21 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat21 = floor(u_xlat21);
    u_xlat1.x = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat15 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.w, u_xlat15);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb21 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb21)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat21 = u_xlat0.y * u_xlat0.y;
    u_xlat21 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat21));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat21), u_xlat0.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 64
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_ParticleUVShiftData at 128
  Float unity_ParticleUseMeshColors at 144
  Vector4 _MainTex_ST at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat8;
    uint2 u_xlatu8;
    float u_xlat15;
    float u_xlat21;
    uint u_xlatu21;
    bool u_xlatb21;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat0.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat0.xyz));
    u_xlat8.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat8.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat8.xyz));
    u_xlat21 = dot(u_xlat4.xyz, u_xlat8.xyz);
    u_xlat21 = float(1.0) / float(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat0.y = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat2.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat2.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat2.xyz));
    u_xlat2.xyz = float3(u_xlat21) * u_xlat2.xyz;
    u_xlat8.xyz = float3(u_xlat21) * u_xlat8.xyz;
    u_xlat0.x = dot(input.NORMAL0.xyz, u_xlat8.xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu21 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu21);
    u_xlatu8.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu21 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu21);
    u_xlat4.yz = float2(u_xlatu8.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat21 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat21 = floor(u_xlat21);
    u_xlat1.x = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat15 = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat1.y = fma((-u_xlat21), VGlobals.unity_ParticleUVShiftData.w, u_xlat15);
    u_xlat1.xy = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat1.xy);
    u_xlatb21 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xy = (bool(u_xlatb21)) ? u_xlat1.xy : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat21 = u_xlat0.y * u_xlat0.y;
    u_xlat21 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat21));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat21), u_xlat0.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixV at 208
  Matrix4x4 unity_MatrixVP at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat9 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat9);
    output.TEXCOORD3.z = (-u_xlat9);
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    u_xlat2.xz = u_xlat1.xz * float2(0.5, 0.5);
    u_xlat9 = u_xlat1.y * VGlobals._ProjectionParams.x;
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat2.w = u_xlat9 * 0.5;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat9 = u_xlat0.y * u_xlat0.y;
    u_xlat9 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat9));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat9), u_xlat0.xyz);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixV at 208
  Matrix4x4 unity_MatrixVP at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat9 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat9);
    output.TEXCOORD3.z = (-u_xlat9);
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    u_xlat2.xz = u_xlat1.xz * float2(0.5, 0.5);
    u_xlat9 = u_xlat1.y * VGlobals._ProjectionParams.x;
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat2.w = u_xlat9 * 0.5;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat9 = u_xlat0.y * u_xlat0.y;
    u_xlat9 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat9));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat9), u_xlat0.xyz);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixV at 208
  Matrix4x4 unity_MatrixVP at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat9 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat9);
    output.TEXCOORD3.z = (-u_xlat9);
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    u_xlat2.xz = u_xlat1.xz * float2(0.5, 0.5);
    u_xlat9 = u_xlat1.y * VGlobals._ProjectionParams.x;
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat2.w = u_xlat9 * 0.5;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat9 = u_xlat0.y * u_xlat0.y;
    u_xlat9 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat9));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat9), u_xlat0.xyz);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH SOFTPARTICLES_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixV at 208
  Matrix4x4 unity_MatrixVP at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, VGlobals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.COLOR0 = input.COLOR0;
    output.TEXCOORD2.xy = fma(input.TEXCOORD0.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat9 = u_xlat1.y * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat1.x, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat1.z, u_xlat9);
    u_xlat9 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z, u_xlat1.w, u_xlat9);
    output.TEXCOORD3.z = (-u_xlat9);
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw, u_xlat1.www, u_xlat1.xyz);
    u_xlat2.xz = u_xlat1.xz * float2(0.5, 0.5);
    u_xlat9 = u_xlat1.y * VGlobals._ProjectionParams.x;
    output.TEXCOORD3.w = u_xlat1.z;
    u_xlat2.w = u_xlat9 * 0.5;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat9 = u_xlat0.y * u_xlat0.y;
    u_xlat9 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat9));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat9), u_xlat0.xyz);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_ParticleUVShiftData at 208
  Float unity_ParticleUseMeshColors at 224
  Vector4 _MainTex_ST at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat15;
    float u_xlat22;
    uint u_xlatu22;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat7.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat7.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat7.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat22 = float(1.0) / float(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * float3(u_xlat22);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat7.xyz));
    u_xlat7.xyz = float3(u_xlat22) * u_xlat7.xyz;
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat7.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu22 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu22);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu22 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu22);
    u_xlat4.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat22 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat22 = floor(u_xlat22);
    u_xlat1.x = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat15 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat8.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat8.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat8.xyz = u_xlat8.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat8.y * VGlobals._ProjectionParams.x;
    u_xlat2.w = u_xlat0.x * 0.5;
    u_xlat2.xz = u_xlat8.xz * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat8.z;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat7.y * u_xlat7.y;
    u_xlat0.x = fma(u_xlat7.x, u_xlat7.x, (-u_xlat0.x));
    u_xlat1 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_ParticleUVShiftData at 208
  Float unity_ParticleUseMeshColors at 224
  Vector4 _MainTex_ST at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat15;
    float u_xlat22;
    uint u_xlatu22;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat7.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat7.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat7.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat22 = float(1.0) / float(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * float3(u_xlat22);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat7.xyz));
    u_xlat7.xyz = float3(u_xlat22) * u_xlat7.xyz;
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat7.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu22 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu22);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu22 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu22);
    u_xlat4.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat22 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat22 = floor(u_xlat22);
    u_xlat1.x = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat15 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat8.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat8.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat8.xyz = u_xlat8.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat8.y * VGlobals._ProjectionParams.x;
    u_xlat2.w = u_xlat0.x * 0.5;
    u_xlat2.xz = u_xlat8.xz * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat8.z;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat7.y * u_xlat7.y;
    u_xlat0.x = fma(u_xlat7.x, u_xlat7.x, (-u_xlat0.x));
    u_xlat1 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON UNITY_HDR_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.SV_Target3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON UNITY_HDR_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD5.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.SV_Target3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat1.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD6.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD6.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat1.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD6.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON UNITY_HDR_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD6.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD6.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.SV_Target3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH SOFTPARTICLES_ON UNITY_HDR_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD6.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH SOFTPARTICLES_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD6.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.SV_Target3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD6.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat1.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD6.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD6.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat1.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD6.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_ParticleUVShiftData at 208
  Float unity_ParticleUseMeshColors at 224
  Vector4 _MainTex_ST at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat15;
    float u_xlat22;
    uint u_xlatu22;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat7.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat7.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat7.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat22 = float(1.0) / float(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * float3(u_xlat22);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat7.xyz));
    u_xlat7.xyz = float3(u_xlat22) * u_xlat7.xyz;
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat7.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu22 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu22);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu22 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu22);
    u_xlat4.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat22 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat22 = floor(u_xlat22);
    u_xlat1.x = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat15 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat8.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat8.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat8.xyz = u_xlat8.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat8.y * VGlobals._ProjectionParams.x;
    u_xlat2.w = u_xlat0.x * 0.5;
    u_xlat2.xz = u_xlat8.xz * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat8.z;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat7.y * u_xlat7.y;
    u_xlat0.x = fma(u_xlat7.x, u_xlat7.x, (-u_xlat0.x));
    u_xlat1 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_ParticleUVShiftData at 208
  Float unity_ParticleUseMeshColors at 224
  Vector4 _MainTex_ST at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}

Set Buffer  "unity_ParticleInstanceData" to slot 2

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 unity_ParticleUVShiftData;
    float unity_ParticleUseMeshColors;
    float4 _MainTex_ST;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct unity_ParticleInstanceData_Type
{
    uint value[14];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 COLOR0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

template <int N> vec<uint, N> bitFieldExtractU(const vec<uint, N> width, const vec<uint, N> offset, const vec<uint, N> src)
{
	vec<bool, N> isWidthZero = (width == 0);
	vec<bool, N> needsClamp = ((width + offset) < 32);
	vec<uint, N> clampVersion = src << (32-(width+offset));
	clampVersion = clampVersion >> (32 - width);
	vec<uint, N> simpleVersion = src >> offset;
	vec<uint, N> res = select(simpleVersion, clampVersion, needsClamp);
	return select(res, vec<uint, N>(0), isWidthZero);
}; 
vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const device unity_ParticleInstanceData_Type *unity_ParticleInstanceData [[ buffer(2) ]],
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    int u_xlati1;
    float4 u_xlat2;
    uint2 u_xlatu2;
    bool u_xlatb2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat15;
    float u_xlat22;
    uint u_xlatu22;
    u_xlat0.xyz = input.POSITION0.xyz;
    u_xlat0.w = 1.0;
    u_xlati1 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat2 = float4(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x24 >> 2) + 3]));
    u_xlat3.w = u_xlat2.y;
    u_xlat8.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0xc >> 2) + 2]));
    u_xlat3.y = u_xlat8.y;
    u_xlat4.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 1]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x18 >> 2) + 0]));
    u_xlat3.z = u_xlat4.x;
    u_xlat5.xyz = float3(as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 2]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 0]), as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x0 >> 2) + 1]));
    u_xlat1.x = as_type<float>(unity_ParticleInstanceData[u_xlati1].value[(0x34 >> 2) + 0]);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat3.x = u_xlat5.z;
    u_xlat15 = dot(u_xlat3, u_xlat0);
    output.TEXCOORD1.y = dot(u_xlat3, input.POSITION0);
    u_xlat6 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4.w = u_xlat2.x;
    u_xlat5.z = u_xlat4.y;
    u_xlat4.x = u_xlat5.y;
    u_xlat4.y = u_xlat8.x;
    u_xlat5.y = u_xlat8.z;
    u_xlat8.x = dot(u_xlat4, u_xlat0);
    output.TEXCOORD1.x = dot(u_xlat4, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat8.xxxx, u_xlat6);
    u_xlat5.w = u_xlat2.z;
    u_xlat0.x = dot(u_xlat5, u_xlat0);
    output.TEXCOORD1.z = dot(u_xlat5, input.POSITION0);
    u_xlat6 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.xxxx, u_xlat6);
    output.mtl_Position = u_xlat6 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat7.xyz = u_xlat4.yzx * u_xlat5.zxy;
    u_xlat7.xyz = fma(u_xlat4.zxy, u_xlat5.yzx, (-u_xlat7.xyz));
    u_xlat2.xyz = u_xlat3.zxy * u_xlat5.yzx;
    u_xlat2.xyz = fma(u_xlat3.yzx, u_xlat5.zxy, (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat22 = float(1.0) / float(u_xlat22);
    u_xlat7.xyz = u_xlat7.xyz * float3(u_xlat22);
    u_xlat5.y = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.xyz = u_xlat3.yzx * u_xlat4.zxy;
    u_xlat7.xyz = fma(u_xlat4.yzx, u_xlat3.zxy, (-u_xlat7.xyz));
    u_xlat7.xyz = float3(u_xlat22) * u_xlat7.xyz;
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat5.x = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat5.z = dot(input.NORMAL0.xyz, u_xlat7.xyz);
    u_xlat7.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat7.xyz = u_xlat7.xxx * u_xlat5.xyz;
    output.TEXCOORD0.xyz = u_xlat7.xyz;
    u_xlat3 = input.COLOR0 + float4(-1.0, -1.0, -1.0, -1.0);
    u_xlat3 = fma(float4(VGlobals.unity_ParticleUseMeshColors), u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlatu22 = as_type<uint>(u_xlat2.w) & 0xffu;
    u_xlat4.x = float(u_xlatu22);
    u_xlatu2.xy = bitFieldExtractU(uint2(0x8u, 0x8u), uint2(0x8u, 0x10u), as_type<uint2>(u_xlat2.ww));
    u_xlatu22 = as_type<uint>(u_xlat2.w) >> 0x18u;
    u_xlat4.w = float(u_xlatu22);
    u_xlat4.yz = float2(u_xlatu2.xy);
    u_xlat2 = u_xlat3 * u_xlat4;
    output.COLOR0 = u_xlat2 * float4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886);
    u_xlat22 = u_xlat1.x / VGlobals.unity_ParticleUVShiftData.y;
    u_xlat22 = floor(u_xlat22);
    u_xlat1.x = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.y, u_xlat1.x);
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat2.x = u_xlat1.x * VGlobals.unity_ParticleUVShiftData.z;
    u_xlat1.x = (-VGlobals.unity_ParticleUVShiftData.w) + 1.0;
    u_xlat2.y = fma((-u_xlat22), VGlobals.unity_ParticleUVShiftData.w, u_xlat1.x);
    u_xlat1.xw = fma(input.TEXCOORD0.xy, VGlobals.unity_ParticleUVShiftData.zw, u_xlat2.xy);
    u_xlatb2 = VGlobals.unity_ParticleUVShiftData.x!=0.0;
    u_xlat1.xw = (bool(u_xlatb2)) ? u_xlat1.xw : input.TEXCOORD0.xy;
    output.TEXCOORD2.xy = fma(u_xlat1.xw, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = u_xlat15 * VGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.xyz = float3(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1].xyw;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0].xyw, u_xlat8.xxx, u_xlat2.xyz);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[0].z, u_xlat8.x, u_xlat1.x);
    u_xlat1.x = fma(VGlobals.hlslcc_mtx4x4unity_MatrixV[2].z, u_xlat0.x, u_xlat1.x);
    u_xlat8.xyz = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2].xyw, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat8.xyz = u_xlat8.xyz + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3].xyw;
    u_xlat0.x = u_xlat1.x + VGlobals.hlslcc_mtx4x4unity_MatrixV[3].z;
    output.TEXCOORD3.z = (-u_xlat0.x);
    u_xlat0.x = u_xlat8.y * VGlobals._ProjectionParams.x;
    u_xlat2.w = u_xlat0.x * 0.5;
    u_xlat2.xz = u_xlat8.xz * float2(0.5, 0.5);
    output.TEXCOORD3.w = u_xlat8.z;
    output.TEXCOORD3.xy = u_xlat2.zz + u_xlat2.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat7.y * u_xlat7.y;
    u_xlat0.x = fma(u_xlat7.x, u_xlat7.x, (-u_xlat0.x));
    u_xlat1 = u_xlat7.yzzx * u_xlat7.xyzz;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON UNITY_HDR_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD6.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD6.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.SV_Target3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON UNITY_HDR_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD6.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    output.SV_Target3.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: LIGHTPROBE_SH PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON UNITY_HDR_ON 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "FGlobals" (184 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Float _Metallic at 176
  Float _Glossiness at 180
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat8;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD1.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat19 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat19);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD0.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD0.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD6.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.SV_Target3.xyz = u_xlat2.xyz * u_xlat0.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Global Keywords: PROCEDURAL_INSTANCING_ON SOFTPARTICLES_ON _EMISSION 
Local Keywords: <none>
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_EmissionMap" to slot 1 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "FGlobals" (200 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Color at 160
  Vector3 _EmissionColor at 176
  Float _Metallic at 192
  Float _Glossiness at 196
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Color;
    float3 _EmissionColor;
    float _Metallic;
    float _Glossiness;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    sampler sampler_EmissionMap [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture(0) ]] ,
    texture2d<float, access::sample > _EmissionMap [[ texture(1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD2.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * FGlobals._Color.xyz;
    u_xlat1.xyz = u_xlat0.xyz * input.COLOR0.xyz;
    u_xlat2.xyz = _EmissionMap.sample(sampler_EmissionMap, input.TEXCOORD2.xy).xyz;
    u_xlatb21 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb21){
        u_xlatb21 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat3.xyz : input.TEXCOORD1.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat21 = u_xlat3.y * 0.25;
        u_xlat22 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat23 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat21 = max(u_xlat21, u_xlat22);
        u_xlat3.x = min(u_xlat23, u_xlat21);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat5.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xyz);
        u_xlat3.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat3.xyz = u_xlat4.xyz + input.TEXCOORD6.xyz;
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3.xyz = log2(u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyz = exp2(u_xlat3.xyz);
    u_xlat3.xyz = fma(u_xlat3.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyz = max(u_xlat3.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = fma(u_xlat0.xyz, input.COLOR0.xyz, float3(-0.220916301, -0.220916301, -0.220916301));
    output.SV_Target1.xyz = fma(float3(FGlobals._Metallic), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-FGlobals._Metallic), 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat3.xyz * u_xlat0.xyz;
    u_xlat1.xyz = fma(u_xlat2.xyz, FGlobals._EmissionColor.xxyz.yzw, u_xlat1.xyz);
    output.SV_Target3.xyz = exp2((-u_xlat1.xyz));
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1.w = FGlobals._Glossiness;
    output.SV_Target2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


 }
}
CustomEditor "StandardParticlesShaderGUI"
Fallback "VertexLit"
}